/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LiquidationInterface extends ethers.utils.Interface {
  functions: {
    "_PERPETUAL_V1_()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "trade(address,address,address,uint256,bytes,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_PERPETUAL_V1_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "_PERPETUAL_V1_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;

  events: {
    "LogLiquidated(address,address,uint256,bool,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogLiquidated"): EventFragment;
}

export class Liquidation extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LiquidationInterface;

  functions: {
    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<[string]>;

    "_PERPETUAL_V1_()"(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    trade(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "trade(address,address,address,uint256,bytes,bytes32)"(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _PERPETUAL_V1_(overrides?: CallOverrides): Promise<string>;

  "_PERPETUAL_V1_()"(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  trade(
    sender: string,
    maker: string,
    taker: string,
    price: BigNumberish,
    data: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "trade(address,address,address,uint256,bytes,bytes32)"(
    sender: string,
    maker: string,
    taker: string,
    price: BigNumberish,
    data: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<string>;

    "_PERPETUAL_V1_()"(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    trade(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        boolean,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        }
      ] & {
        debtAmount: BigNumber;
        sizeAmount: BigNumber;
        isBuy: boolean;
        traderFlags: string;
        makerCollat: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        };
        takerCollat: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        };
      }
    >;

    "trade(address,address,address,uint256,bytes,bytes32)"(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        boolean,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        }
      ] & {
        debtAmount: BigNumber;
        sizeAmount: BigNumber;
        isBuy: boolean;
        traderFlags: string;
        makerCollat: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        };
        takerCollat: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        };
      }
    >;
  };

  filters: {
    LogLiquidated(
      maker: string | null,
      taker: string | null,
      amount: null,
      isBuy: null,
      oraclePrice: null,
      timestamp: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean, BigNumber, BigNumber],
      {
        maker: string;
        taker: string;
        amount: BigNumber;
        isBuy: boolean;
        oraclePrice: BigNumber;
        timestamp: BigNumber;
      }
    >;
  };

  estimateGas: {
    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<BigNumber>;

    "_PERPETUAL_V1_()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trade(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "trade(address,address,address,uint256,bytes,bytes32)"(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_PERPETUAL_V1_()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trade(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "trade(address,address,address,uint256,bytes,bytes32)"(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
