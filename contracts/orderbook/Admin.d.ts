/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AdminInterface extends ethers.utils.Interface {
  functions: {
    "enableFinalSettlement(uint256,uint256)": FunctionFragment;
    "getAccountBalanceAfterSettlement(address)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setFeePool(address)": FunctionFragment;
    "setFunder(address)": FunctionFragment;
    "setGlobalOperator(address,bool)": FunctionFragment;
    "setInitialMargin(uint256)": FunctionFragment;
    "setMaintenanceMargin(uint256)": FunctionFragment;
    "setMarginBank(address)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setTradeInfo(address)": FunctionFragment;
    "startTrading()": FunctionFragment;
    "stopTrading()": FunctionFragment;
    "withdrawFinalSettlement()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "enableFinalSettlement",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalanceAfterSettlement",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "setFeePool", values: [string]): string;
  encodeFunctionData(functionFragment: "setFunder", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setGlobalOperator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialMargin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaintenanceMargin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarginBank",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTradeInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "startTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFinalSettlement",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "enableFinalSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalanceAfterSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFunder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaintenanceMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarginBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTradeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFinalSettlement",
    data: BytesLike
  ): Result;

  events: {
    "LogAccountSettled(address,bool,bool,uint256,uint256,uint256,uint256,bytes32,string)": EventFragment;
    "LogFinalSettlementEnabled(uint256)": EventFragment;
    "LogIndex(bytes32)": EventFragment;
    "LogSetFeePool(address)": EventFragment;
    "LogSetFunder(address)": EventFragment;
    "LogSetGlobalOperator(address,bool)": EventFragment;
    "LogSetInitialMargin(uint256)": EventFragment;
    "LogSetMaintenanceMargin(uint256)": EventFragment;
    "LogSetMarginBank(address)": EventFragment;
    "LogSetOracle(address)": EventFragment;
    "LogSetTradeInfo(address)": EventFragment;
    "LogTradingStarted(uint256)": EventFragment;
    "LogTradingStopped(uint256)": EventFragment;
    "LogWithdrawFinalSettlement(address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAccountSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFinalSettlementEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogIndex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetFeePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetFunder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetGlobalOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetInitialMargin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetMaintenanceMargin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetMarginBank"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetTradeInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTradingStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTradingStopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawFinalSettlement"): EventFragment;
}

export class Admin extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AdminInterface;

  functions: {
    enableFinalSettlement(
      priceLowerBound: BigNumberish,
      priceUpperBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "enableFinalSettlement(uint256,uint256)"(
      priceLowerBound: BigNumberish,
      priceUpperBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountBalanceAfterSettlement(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
          debt: BigNumber;
          debtIsPositive: boolean;
          size: BigNumber;
          sizeIsPositive: boolean;
          margin: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          }
        ] & {
          price: BigNumber;
          maintenanceMargin: BigNumber;
          initialMargin: BigNumber;
          index: [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          };
        }
      ]
    >;

    "getAccountBalanceAfterSettlement(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
          debt: BigNumber;
          debtIsPositive: boolean;
          size: BigNumber;
          sizeIsPositive: boolean;
          margin: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          }
        ] & {
          price: BigNumber;
          maintenanceMargin: BigNumber;
          initialMargin: BigNumber;
          index: [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          };
        }
      ]
    >;

    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    "getAdmin()"(overrides?: CallOverrides): Promise<[string]>;

    setAdmin(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAdmin(address)"(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeePool(
      feePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFeePool(address)"(
      feePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFunder(
      funder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFunder(address)"(
      funder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGlobalOperator(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInitialMargin(
      initialMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setInitialMargin(uint256)"(
      initialMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaintenanceMargin(
      maintenanceMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaintenanceMargin(uint256)"(
      maintenanceMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarginBank(
      marginBank: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMarginBank(address)"(
      marginBank: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOracle(address)"(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTradeInfo(
      tradeInfo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTradeInfo(address)"(
      tradeInfo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "startTrading()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stopTrading()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFinalSettlement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFinalSettlement()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  enableFinalSettlement(
    priceLowerBound: BigNumberish,
    priceUpperBound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "enableFinalSettlement(uint256,uint256)"(
    priceLowerBound: BigNumberish,
    priceUpperBound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountBalanceAfterSettlement(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
        debt: BigNumber;
        debtIsPositive: boolean;
        size: BigNumber;
        sizeIsPositive: boolean;
        margin: BigNumber;
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        }
      ] & {
        price: BigNumber;
        maintenanceMargin: BigNumber;
        initialMargin: BigNumber;
        index: [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        };
      }
    ]
  >;

  "getAccountBalanceAfterSettlement(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
        debt: BigNumber;
        debtIsPositive: boolean;
        size: BigNumber;
        sizeIsPositive: boolean;
        margin: BigNumber;
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        }
      ] & {
        price: BigNumber;
        maintenanceMargin: BigNumber;
        initialMargin: BigNumber;
        index: [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        };
      }
    ]
  >;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  "getAdmin()"(overrides?: CallOverrides): Promise<string>;

  setAdmin(
    admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAdmin(address)"(
    admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeePool(
    feePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFeePool(address)"(
    feePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFunder(
    funder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFunder(address)"(
    funder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGlobalOperator(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGlobalOperator(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInitialMargin(
    initialMargin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setInitialMargin(uint256)"(
    initialMargin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaintenanceMargin(
    maintenanceMargin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaintenanceMargin(uint256)"(
    maintenanceMargin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarginBank(
    marginBank: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMarginBank(address)"(
    marginBank: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOracle(address)"(
    oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTradeInfo(
    tradeInfo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTradeInfo(address)"(
    tradeInfo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTrading(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "startTrading()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopTrading(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stopTrading()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFinalSettlement(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFinalSettlement()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    enableFinalSettlement(
      priceLowerBound: BigNumberish,
      priceUpperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "enableFinalSettlement(uint256,uint256)"(
      priceLowerBound: BigNumberish,
      priceUpperBound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountBalanceAfterSettlement(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
          debt: BigNumber;
          debtIsPositive: boolean;
          size: BigNumber;
          sizeIsPositive: boolean;
          margin: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          }
        ] & {
          price: BigNumber;
          maintenanceMargin: BigNumber;
          initialMargin: BigNumber;
          index: [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          };
        }
      ]
    >;

    "getAccountBalanceAfterSettlement(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
          debt: BigNumber;
          debtIsPositive: boolean;
          size: BigNumber;
          sizeIsPositive: boolean;
          margin: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          }
        ] & {
          price: BigNumber;
          maintenanceMargin: BigNumber;
          initialMargin: BigNumber;
          index: [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          };
        }
      ]
    >;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    "getAdmin()"(overrides?: CallOverrides): Promise<string>;

    setAdmin(admin: string, overrides?: CallOverrides): Promise<boolean>;

    "setAdmin(address)"(
      admin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFeePool(feePool: string, overrides?: CallOverrides): Promise<void>;

    "setFeePool(address)"(
      feePool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFunder(funder: string, overrides?: CallOverrides): Promise<void>;

    "setFunder(address)"(
      funder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGlobalOperator(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialMargin(
      initialMargin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInitialMargin(uint256)"(
      initialMargin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaintenanceMargin(
      maintenanceMargin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaintenanceMargin(uint256)"(
      maintenanceMargin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarginBank(marginBank: string, overrides?: CallOverrides): Promise<void>;

    "setMarginBank(address)"(
      marginBank: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(oracle: string, overrides?: CallOverrides): Promise<void>;

    "setOracle(address)"(
      oracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTradeInfo(tradeInfo: string, overrides?: CallOverrides): Promise<void>;

    "setTradeInfo(address)"(
      tradeInfo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startTrading(overrides?: CallOverrides): Promise<void>;

    "startTrading()"(overrides?: CallOverrides): Promise<void>;

    stopTrading(overrides?: CallOverrides): Promise<void>;

    "stopTrading()"(overrides?: CallOverrides): Promise<void>;

    withdrawFinalSettlement(overrides?: CallOverrides): Promise<void>;

    "withdrawFinalSettlement()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    LogAccountSettled(
      account: string | null,
      isPositive: null,
      isFundingRatePositive: null,
      amount: null,
      fundingRate: null,
      price: null,
      timestamp: null,
      balance: null,
      symbol: null
    ): TypedEventFilter<
      [
        string,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ],
      {
        account: string;
        isPositive: boolean;
        isFundingRatePositive: boolean;
        amount: BigNumber;
        fundingRate: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
        balance: string;
        symbol: string;
      }
    >;

    LogFinalSettlementEnabled(
      settlementPrice: null
    ): TypedEventFilter<[BigNumber], { settlementPrice: BigNumber }>;

    LogIndex(index: null): TypedEventFilter<[string], { index: string }>;

    LogSetFeePool(
      feePool: null
    ): TypedEventFilter<[string], { feePool: string }>;

    LogSetFunder(funder: null): TypedEventFilter<[string], { funder: string }>;

    LogSetGlobalOperator(
      operator: null,
      approved: null
    ): TypedEventFilter<
      [string, boolean],
      { operator: string; approved: boolean }
    >;

    LogSetInitialMargin(
      initialMargin: null
    ): TypedEventFilter<[BigNumber], { initialMargin: BigNumber }>;

    LogSetMaintenanceMargin(
      maintenanceMargin: null
    ): TypedEventFilter<[BigNumber], { maintenanceMargin: BigNumber }>;

    LogSetMarginBank(
      marginBank: null
    ): TypedEventFilter<[string], { marginBank: string }>;

    LogSetOracle(oracle: null): TypedEventFilter<[string], { oracle: string }>;

    LogSetTradeInfo(
      tradeInfo: null
    ): TypedEventFilter<[string], { tradeInfo: string }>;

    LogTradingStarted(
      startTime: null
    ): TypedEventFilter<[BigNumber], { startTime: BigNumber }>;

    LogTradingStopped(
      stopTime: null
    ): TypedEventFilter<[BigNumber], { stopTime: BigNumber }>;

    LogWithdrawFinalSettlement(
      account: string | null,
      amount: null,
      balance: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { account: string; amount: BigNumber; balance: string }
    >;
  };

  estimateGas: {
    enableFinalSettlement(
      priceLowerBound: BigNumberish,
      priceUpperBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "enableFinalSettlement(uint256,uint256)"(
      priceLowerBound: BigNumberish,
      priceUpperBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountBalanceAfterSettlement(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountBalanceAfterSettlement(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAdmin(address)"(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeePool(
      feePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFeePool(address)"(
      feePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFunder(
      funder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFunder(address)"(
      funder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGlobalOperator(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInitialMargin(
      initialMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setInitialMargin(uint256)"(
      initialMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaintenanceMargin(
      maintenanceMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaintenanceMargin(uint256)"(
      maintenanceMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarginBank(
      marginBank: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMarginBank(address)"(
      marginBank: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOracle(address)"(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTradeInfo(
      tradeInfo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTradeInfo(address)"(
      tradeInfo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "startTrading()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stopTrading()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFinalSettlement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFinalSettlement()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    enableFinalSettlement(
      priceLowerBound: BigNumberish,
      priceUpperBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "enableFinalSettlement(uint256,uint256)"(
      priceLowerBound: BigNumberish,
      priceUpperBound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountBalanceAfterSettlement(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountBalanceAfterSettlement(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdmin(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAdmin(address)"(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeePool(
      feePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFeePool(address)"(
      feePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFunder(
      funder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFunder(address)"(
      funder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGlobalOperator(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGlobalOperator(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInitialMargin(
      initialMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setInitialMargin(uint256)"(
      initialMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaintenanceMargin(
      maintenanceMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaintenanceMargin(uint256)"(
      maintenanceMargin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarginBank(
      marginBank: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMarginBank(address)"(
      marginBank: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOracle(address)"(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTradeInfo(
      tradeInfo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTradeInfo(address)"(
      tradeInfo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "startTrading()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stopTrading()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFinalSettlement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFinalSettlement()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
