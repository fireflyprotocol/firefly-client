/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SettlementInterface extends ethers.utils.Interface {
  functions: {
    "getAccountBalanceAfterSettlement(address)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAccountBalanceAfterSettlement",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "getAccountBalanceAfterSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;

  events: {
    "LogAccountSettled(address,bool,bool,uint256,uint256,uint256,uint256,bytes32,string)": EventFragment;
    "LogIndex(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAccountSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogIndex"): EventFragment;
}

export class Settlement extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SettlementInterface;

  functions: {
    getAccountBalanceAfterSettlement(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
          debt: BigNumber;
          debtIsPositive: boolean;
          size: BigNumber;
          sizeIsPositive: boolean;
          margin: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          }
        ] & {
          price: BigNumber;
          maintenanceMargin: BigNumber;
          initialMargin: BigNumber;
          index: [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          };
        }
      ]
    >;

    "getAccountBalanceAfterSettlement(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
          debt: BigNumber;
          debtIsPositive: boolean;
          size: BigNumber;
          sizeIsPositive: boolean;
          margin: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          }
        ] & {
          price: BigNumber;
          maintenanceMargin: BigNumber;
          initialMargin: BigNumber;
          index: [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          };
        }
      ]
    >;

    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    "getAdmin()"(overrides?: CallOverrides): Promise<[string]>;

    setAdmin(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAdmin(address)"(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAccountBalanceAfterSettlement(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
        debt: BigNumber;
        debtIsPositive: boolean;
        size: BigNumber;
        sizeIsPositive: boolean;
        margin: BigNumber;
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        }
      ] & {
        price: BigNumber;
        maintenanceMargin: BigNumber;
        initialMargin: BigNumber;
        index: [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        };
      }
    ]
  >;

  "getAccountBalanceAfterSettlement(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
        debt: BigNumber;
        debtIsPositive: boolean;
        size: BigNumber;
        sizeIsPositive: boolean;
        margin: BigNumber;
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        }
      ] & {
        price: BigNumber;
        maintenanceMargin: BigNumber;
        initialMargin: BigNumber;
        index: [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        };
      }
    ]
  >;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  "getAdmin()"(overrides?: CallOverrides): Promise<string>;

  setAdmin(
    admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAdmin(address)"(
    admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccountBalanceAfterSettlement(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
          debt: BigNumber;
          debtIsPositive: boolean;
          size: BigNumber;
          sizeIsPositive: boolean;
          margin: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          }
        ] & {
          price: BigNumber;
          maintenanceMargin: BigNumber;
          initialMargin: BigNumber;
          index: [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          };
        }
      ]
    >;

    "getAccountBalanceAfterSettlement(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
          debt: BigNumber;
          debtIsPositive: boolean;
          size: BigNumber;
          sizeIsPositive: boolean;
          margin: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          }
        ] & {
          price: BigNumber;
          maintenanceMargin: BigNumber;
          initialMargin: BigNumber;
          index: [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          };
        }
      ]
    >;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    "getAdmin()"(overrides?: CallOverrides): Promise<string>;

    setAdmin(admin: string, overrides?: CallOverrides): Promise<boolean>;

    "setAdmin(address)"(
      admin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    LogAccountSettled(
      account: string | null,
      isPositive: null,
      isFundingRatePositive: null,
      amount: null,
      fundingRate: null,
      price: null,
      timestamp: null,
      balance: null,
      symbol: null
    ): TypedEventFilter<
      [
        string,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ],
      {
        account: string;
        isPositive: boolean;
        isFundingRatePositive: boolean;
        amount: BigNumber;
        fundingRate: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
        balance: string;
        symbol: string;
      }
    >;

    LogIndex(index: null): TypedEventFilter<[string], { index: string }>;
  };

  estimateGas: {
    getAccountBalanceAfterSettlement(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountBalanceAfterSettlement(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAdmin(address)"(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountBalanceAfterSettlement(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountBalanceAfterSettlement(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdmin(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAdmin(address)"(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
