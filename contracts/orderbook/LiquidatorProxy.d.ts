/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LiquidatorProxyInterface extends ethers.utils.Interface {
  functions: {
    "_INSURANCE_FEE_()": FunctionFragment;
    "_INSURANCE_FUND_()": FunctionFragment;
    "_LIQUIDATION_()": FunctionFragment;
    "_PERPETUAL_V1_()": FunctionFragment;
    "approveMaximumOnPerpetual()": FunctionFragment;
    "liquidate(address,address,bool,uint256,tuple)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setInsuranceFee(uint256)": FunctionFragment;
    "setInsuranceFund(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_INSURANCE_FEE_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_INSURANCE_FUND_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_LIQUIDATION_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_PERPETUAL_V1_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveMaximumOnPerpetual",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      string,
      string,
      boolean,
      BigNumberish,
      { value: BigNumberish; isPositive: boolean }
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInsuranceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInsuranceFund",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_INSURANCE_FEE_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_INSURANCE_FUND_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_LIQUIDATION_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_PERPETUAL_V1_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveMaximumOnPerpetual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInsuranceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "LogInsuranceFeeSet(uint256)": EventFragment;
    "LogInsuranceFundSet(address)": EventFragment;
    "LogLiquidatorProxyUsed(address,address,bool,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogInsuranceFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogInsuranceFundSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogLiquidatorProxyUsed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class LiquidatorProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LiquidatorProxyInterface;

  functions: {
    _INSURANCE_FEE_(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_INSURANCE_FEE_()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _INSURANCE_FUND_(overrides?: CallOverrides): Promise<[string]>;

    "_INSURANCE_FUND_()"(overrides?: CallOverrides): Promise<[string]>;

    _LIQUIDATION_(overrides?: CallOverrides): Promise<[string]>;

    "_LIQUIDATION_()"(overrides?: CallOverrides): Promise<[string]>;

    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<[string]>;

    "_PERPETUAL_V1_()"(overrides?: CallOverrides): Promise<[string]>;

    approveMaximumOnPerpetual(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approveMaximumOnPerpetual()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      liquidatee: string,
      liquidator: string,
      isBuy: boolean,
      leverage: BigNumberish,
      maxSize: { value: BigNumberish; isPositive: boolean },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "liquidate(address,address,bool,uint256,tuple)"(
      liquidatee: string,
      liquidator: string,
      isBuy: boolean,
      leverage: BigNumberish,
      maxSize: { value: BigNumberish; isPositive: boolean },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInsuranceFee(
      insuranceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setInsuranceFee(uint256)"(
      insuranceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInsuranceFund(
      insuranceFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setInsuranceFund(address)"(
      insuranceFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _INSURANCE_FEE_(overrides?: CallOverrides): Promise<BigNumber>;

  "_INSURANCE_FEE_()"(overrides?: CallOverrides): Promise<BigNumber>;

  _INSURANCE_FUND_(overrides?: CallOverrides): Promise<string>;

  "_INSURANCE_FUND_()"(overrides?: CallOverrides): Promise<string>;

  _LIQUIDATION_(overrides?: CallOverrides): Promise<string>;

  "_LIQUIDATION_()"(overrides?: CallOverrides): Promise<string>;

  _PERPETUAL_V1_(overrides?: CallOverrides): Promise<string>;

  "_PERPETUAL_V1_()"(overrides?: CallOverrides): Promise<string>;

  approveMaximumOnPerpetual(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approveMaximumOnPerpetual()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    liquidatee: string,
    liquidator: string,
    isBuy: boolean,
    leverage: BigNumberish,
    maxSize: { value: BigNumberish; isPositive: boolean },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "liquidate(address,address,bool,uint256,tuple)"(
    liquidatee: string,
    liquidator: string,
    isBuy: boolean,
    leverage: BigNumberish,
    maxSize: { value: BigNumberish; isPositive: boolean },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInsuranceFee(
    insuranceFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setInsuranceFee(uint256)"(
    insuranceFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInsuranceFund(
    insuranceFund: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setInsuranceFund(address)"(
    insuranceFund: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _INSURANCE_FEE_(overrides?: CallOverrides): Promise<BigNumber>;

    "_INSURANCE_FEE_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _INSURANCE_FUND_(overrides?: CallOverrides): Promise<string>;

    "_INSURANCE_FUND_()"(overrides?: CallOverrides): Promise<string>;

    _LIQUIDATION_(overrides?: CallOverrides): Promise<string>;

    "_LIQUIDATION_()"(overrides?: CallOverrides): Promise<string>;

    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<string>;

    "_PERPETUAL_V1_()"(overrides?: CallOverrides): Promise<string>;

    approveMaximumOnPerpetual(overrides?: CallOverrides): Promise<void>;

    "approveMaximumOnPerpetual()"(overrides?: CallOverrides): Promise<void>;

    liquidate(
      liquidatee: string,
      liquidator: string,
      isBuy: boolean,
      leverage: BigNumberish,
      maxSize: { value: BigNumberish; isPositive: boolean },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "liquidate(address,address,bool,uint256,tuple)"(
      liquidatee: string,
      liquidator: string,
      isBuy: boolean,
      leverage: BigNumberish,
      maxSize: { value: BigNumberish; isPositive: boolean },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setInsuranceFee(
      insuranceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInsuranceFee(uint256)"(
      insuranceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInsuranceFund(
      insuranceFund: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInsuranceFund(address)"(
      insuranceFund: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    LogInsuranceFeeSet(
      insuranceFee: null
    ): TypedEventFilter<[BigNumber], { insuranceFee: BigNumber }>;

    LogInsuranceFundSet(
      insuranceFund: null
    ): TypedEventFilter<[string], { insuranceFund: string }>;

    LogLiquidatorProxyUsed(
      liquidatee: string | null,
      liquidator: string | null,
      isBuy: null,
      liquidationAmount: null,
      feeAmount: null
    ): TypedEventFilter<
      [string, string, boolean, BigNumber, BigNumber],
      {
        liquidatee: string;
        liquidator: string;
        isBuy: boolean;
        liquidationAmount: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    _INSURANCE_FEE_(overrides?: CallOverrides): Promise<BigNumber>;

    "_INSURANCE_FEE_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _INSURANCE_FUND_(overrides?: CallOverrides): Promise<BigNumber>;

    "_INSURANCE_FUND_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _LIQUIDATION_(overrides?: CallOverrides): Promise<BigNumber>;

    "_LIQUIDATION_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<BigNumber>;

    "_PERPETUAL_V1_()"(overrides?: CallOverrides): Promise<BigNumber>;

    approveMaximumOnPerpetual(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approveMaximumOnPerpetual()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      liquidatee: string,
      liquidator: string,
      isBuy: boolean,
      leverage: BigNumberish,
      maxSize: { value: BigNumberish; isPositive: boolean },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "liquidate(address,address,bool,uint256,tuple)"(
      liquidatee: string,
      liquidator: string,
      isBuy: boolean,
      leverage: BigNumberish,
      maxSize: { value: BigNumberish; isPositive: boolean },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInsuranceFee(
      insuranceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setInsuranceFee(uint256)"(
      insuranceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInsuranceFund(
      insuranceFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setInsuranceFund(address)"(
      insuranceFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _INSURANCE_FEE_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_INSURANCE_FEE_()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _INSURANCE_FUND_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_INSURANCE_FUND_()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _LIQUIDATION_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_LIQUIDATION_()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_PERPETUAL_V1_()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveMaximumOnPerpetual(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approveMaximumOnPerpetual()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      liquidatee: string,
      liquidator: string,
      isBuy: boolean,
      leverage: BigNumberish,
      maxSize: { value: BigNumberish; isPositive: boolean },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "liquidate(address,address,bool,uint256,tuple)"(
      liquidatee: string,
      liquidator: string,
      isBuy: boolean,
      leverage: BigNumberish,
      maxSize: { value: BigNumberish; isPositive: boolean },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInsuranceFee(
      insuranceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setInsuranceFee(uint256)"(
      insuranceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInsuranceFund(
      insuranceFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setInsuranceFund(address)"(
      insuranceFund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
