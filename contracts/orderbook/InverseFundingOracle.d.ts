/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface InverseFundingOracleInterface extends ethers.utils.Interface {
  functions: {
    "FUNDING_RATE_SLOT()": FunctionFragment;
    "FUNDING_RATE_WINDOW()": FunctionFragment;
    "MAX_ABS_DIFF_PER_SECOND()": FunctionFragment;
    "MAX_ABS_VALUE()": FunctionFragment;
    "_DEPLOYED_TIMESTAMP_()": FunctionFragment;
    "_FUNDING_RATE_PROVIDER_()": FunctionFragment;
    "calculateFundingRate(uint256)": FunctionFragment;
    "getCurrentFundingSlot()": FunctionFragment;
    "getCurrentFundingWindow()": FunctionFragment;
    "getFunding(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "recordOrderTrade(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFundingRate()": FunctionFragment;
    "setFundingRateProvider(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FUNDING_RATE_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FUNDING_RATE_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ABS_DIFF_PER_SECOND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ABS_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_DEPLOYED_TIMESTAMP_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_FUNDING_RATE_PROVIDER_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFundingRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentFundingSlot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentFundingWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFunding",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordOrderTrade",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingRateProvider",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "FUNDING_RATE_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FUNDING_RATE_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ABS_DIFF_PER_SECOND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ABS_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_DEPLOYED_TIMESTAMP_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_FUNDING_RATE_PROVIDER_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentFundingSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentFundingWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFunding", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordOrderTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingRateProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "LogFundingRateProviderSet(address)": EventFragment;
    "LogFundingRateTradeRecorded(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogFundingRateUpdated(bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogFundingRateProviderSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogFundingRateTradeRecorded"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFundingRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class InverseFundingOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: InverseFundingOracleInterface;

  functions: {
    FUNDING_RATE_SLOT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "FUNDING_RATE_SLOT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    FUNDING_RATE_WINDOW(overrides?: CallOverrides): Promise<[BigNumber]>;

    "FUNDING_RATE_WINDOW()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_ABS_DIFF_PER_SECOND(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_ABS_DIFF_PER_SECOND()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_ABS_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_ABS_VALUE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _DEPLOYED_TIMESTAMP_(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_DEPLOYED_TIMESTAMP_()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _FUNDING_RATE_PROVIDER_(overrides?: CallOverrides): Promise<[string]>;

    "_FUNDING_RATE_PROVIDER_()"(overrides?: CallOverrides): Promise<[string]>;

    calculateFundingRate(
      fundingWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        [BigNumber, boolean] & { value: BigNumber; isPositive: boolean }
      ] & {
        avgTradePrice: BigNumber;
        avgOraclePrice: BigNumber;
        newFundingRate: [BigNumber, boolean] & {
          value: BigNumber;
          isPositive: boolean;
        };
      }
    >;

    "calculateFundingRate(uint256)"(
      fundingWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        [BigNumber, boolean] & { value: BigNumber; isPositive: boolean }
      ] & {
        avgTradePrice: BigNumber;
        avgOraclePrice: BigNumber;
        newFundingRate: [BigNumber, boolean] & {
          value: BigNumber;
          isPositive: boolean;
        };
      }
    >;

    getCurrentFundingSlot(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentFundingSlot()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentFundingWindow(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentFundingWindow()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFunding(
      timeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    "getFunding(uint256)"(
      timeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    recordOrderTrade(
      tradePrice: BigNumberish,
      oraclePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "recordOrderTrade(uint256,uint256)"(
      tradePrice: BigNumberish,
      oraclePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFundingRate()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundingRateProvider(
      newProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFundingRateProvider(address)"(
      newProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FUNDING_RATE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

  "FUNDING_RATE_SLOT()"(overrides?: CallOverrides): Promise<BigNumber>;

  FUNDING_RATE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

  "FUNDING_RATE_WINDOW()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ABS_DIFF_PER_SECOND(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_ABS_DIFF_PER_SECOND()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ABS_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_ABS_VALUE()"(overrides?: CallOverrides): Promise<BigNumber>;

  _DEPLOYED_TIMESTAMP_(overrides?: CallOverrides): Promise<BigNumber>;

  "_DEPLOYED_TIMESTAMP_()"(overrides?: CallOverrides): Promise<BigNumber>;

  _FUNDING_RATE_PROVIDER_(overrides?: CallOverrides): Promise<string>;

  "_FUNDING_RATE_PROVIDER_()"(overrides?: CallOverrides): Promise<string>;

  calculateFundingRate(
    fundingWindow: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      [BigNumber, boolean] & { value: BigNumber; isPositive: boolean }
    ] & {
      avgTradePrice: BigNumber;
      avgOraclePrice: BigNumber;
      newFundingRate: [BigNumber, boolean] & {
        value: BigNumber;
        isPositive: boolean;
      };
    }
  >;

  "calculateFundingRate(uint256)"(
    fundingWindow: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      [BigNumber, boolean] & { value: BigNumber; isPositive: boolean }
    ] & {
      avgTradePrice: BigNumber;
      avgOraclePrice: BigNumber;
      newFundingRate: [BigNumber, boolean] & {
        value: BigNumber;
        isPositive: boolean;
      };
    }
  >;

  getCurrentFundingSlot(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentFundingSlot()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentFundingWindow(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentFundingWindow()"(overrides?: CallOverrides): Promise<BigNumber>;

  getFunding(
    timeDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  "getFunding(uint256)"(
    timeDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  recordOrderTrade(
    tradePrice: BigNumberish,
    oraclePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "recordOrderTrade(uint256,uint256)"(
    tradePrice: BigNumberish,
    oraclePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingRate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFundingRate()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundingRateProvider(
    newProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFundingRateProvider(address)"(
    newProvider: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FUNDING_RATE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    "FUNDING_RATE_SLOT()"(overrides?: CallOverrides): Promise<BigNumber>;

    FUNDING_RATE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    "FUNDING_RATE_WINDOW()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ABS_DIFF_PER_SECOND(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_ABS_DIFF_PER_SECOND()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ABS_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_ABS_VALUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    _DEPLOYED_TIMESTAMP_(overrides?: CallOverrides): Promise<BigNumber>;

    "_DEPLOYED_TIMESTAMP_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _FUNDING_RATE_PROVIDER_(overrides?: CallOverrides): Promise<string>;

    "_FUNDING_RATE_PROVIDER_()"(overrides?: CallOverrides): Promise<string>;

    calculateFundingRate(
      fundingWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        [BigNumber, boolean] & { value: BigNumber; isPositive: boolean }
      ] & {
        avgTradePrice: BigNumber;
        avgOraclePrice: BigNumber;
        newFundingRate: [BigNumber, boolean] & {
          value: BigNumber;
          isPositive: boolean;
        };
      }
    >;

    "calculateFundingRate(uint256)"(
      fundingWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        [BigNumber, boolean] & { value: BigNumber; isPositive: boolean }
      ] & {
        avgTradePrice: BigNumber;
        avgOraclePrice: BigNumber;
        newFundingRate: [BigNumber, boolean] & {
          value: BigNumber;
          isPositive: boolean;
        };
      }
    >;

    getCurrentFundingSlot(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentFundingSlot()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentFundingWindow(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentFundingWindow()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFunding(
      timeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    "getFunding(uint256)"(
      timeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    recordOrderTrade(
      tradePrice: BigNumberish,
      oraclePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "recordOrderTrade(uint256,uint256)"(
      tradePrice: BigNumberish,
      oraclePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setFundingRate(
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, BigNumber] & {
        timestamp: number;
        isPositive: boolean;
        value: BigNumber;
      }
    >;

    "setFundingRate()"(
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, BigNumber] & {
        timestamp: number;
        isPositive: boolean;
        value: BigNumber;
      }
    >;

    setFundingRateProvider(
      newProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFundingRateProvider(address)"(
      newProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    LogFundingRateProviderSet(
      fundingRateProvider: null
    ): TypedEventFilter<[string], { fundingRateProvider: string }>;

    LogFundingRateTradeRecorded(
      fundingWindow: null,
      fundingSlot: null,
      tradesCount: null,
      aggTradePrice: null,
      aggOraclePrice: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        fundingWindow: BigNumber;
        fundingSlot: BigNumber;
        tradesCount: BigNumber;
        aggTradePrice: BigNumber;
        aggOraclePrice: BigNumber;
      }
    >;

    LogFundingRateUpdated(
      fundingRate: null
    ): TypedEventFilter<[string], { fundingRate: string }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    FUNDING_RATE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    "FUNDING_RATE_SLOT()"(overrides?: CallOverrides): Promise<BigNumber>;

    FUNDING_RATE_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    "FUNDING_RATE_WINDOW()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ABS_DIFF_PER_SECOND(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_ABS_DIFF_PER_SECOND()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ABS_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_ABS_VALUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    _DEPLOYED_TIMESTAMP_(overrides?: CallOverrides): Promise<BigNumber>;

    "_DEPLOYED_TIMESTAMP_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _FUNDING_RATE_PROVIDER_(overrides?: CallOverrides): Promise<BigNumber>;

    "_FUNDING_RATE_PROVIDER_()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateFundingRate(
      fundingWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateFundingRate(uint256)"(
      fundingWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentFundingSlot(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentFundingSlot()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentFundingWindow(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentFundingWindow()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFunding(
      timeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFunding(uint256)"(
      timeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    recordOrderTrade(
      tradePrice: BigNumberish,
      oraclePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "recordOrderTrade(uint256,uint256)"(
      tradePrice: BigNumberish,
      oraclePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFundingRate()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundingRateProvider(
      newProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFundingRateProvider(address)"(
      newProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FUNDING_RATE_SLOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FUNDING_RATE_SLOT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FUNDING_RATE_WINDOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FUNDING_RATE_WINDOW()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_ABS_DIFF_PER_SECOND(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_ABS_DIFF_PER_SECOND()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_ABS_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_ABS_VALUE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _DEPLOYED_TIMESTAMP_(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_DEPLOYED_TIMESTAMP_()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _FUNDING_RATE_PROVIDER_(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_FUNDING_RATE_PROVIDER_()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateFundingRate(
      fundingWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateFundingRate(uint256)"(
      fundingWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentFundingSlot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentFundingSlot()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentFundingWindow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentFundingWindow()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFunding(
      timeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFunding(uint256)"(
      timeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recordOrderTrade(
      tradePrice: BigNumberish,
      oraclePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "recordOrderTrade(uint256,uint256)"(
      tradePrice: BigNumberish,
      oraclePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingRate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFundingRate()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundingRateProvider(
      newProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFundingRateProvider(address)"(
      newProvider: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
