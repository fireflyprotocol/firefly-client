/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PositionManagerInterface extends ethers.utils.Interface {
  functions: {
    "depositToPosition(address,uint256,bytes32)": FunctionFragment;
    "getAccountBalanceAfterSettlement(address)": FunctionFragment;
    "getAccountIndex(address)": FunctionFragment;
    "getAccountPositionBalance(address)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getFeePoolContract()": FunctionFragment;
    "getFinalSettlementEnabled()": FunctionFragment;
    "getFunderContract()": FunctionFragment;
    "getGlobalIndex()": FunctionFragment;
    "getInitialMargin()": FunctionFragment;
    "getIsGlobalOperator(address)": FunctionFragment;
    "getIsLocalOperator(address,address)": FunctionFragment;
    "getMaintenanceMargin()": FunctionFragment;
    "getOracleContract()": FunctionFragment;
    "getOraclePrice()": FunctionFragment;
    "getTokenContract()": FunctionFragment;
    "getTradeInfoContract()": FunctionFragment;
    "getTradingStartTime()": FunctionFragment;
    "hasAccountPermissions(address,address)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "transferFromPosition(address,address,uint256,bytes32)": FunctionFragment;
    "withdrawFinalSettlement()": FunctionFragment;
    "withdrawFromPosition(address,address,uint256,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "depositToPosition",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalanceAfterSettlement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountPositionBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFeePoolContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFinalSettlementEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFunderContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsGlobalOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsLocalOperator",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaintenanceMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeInfoContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTradingStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccountPermissions",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferFromPosition",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFinalSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromPosition",
    values: [string, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositToPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalanceAfterSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountPositionBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeePoolContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFinalSettlementEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFunderContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsGlobalOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsLocalOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaintenanceMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeInfoContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradingStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAccountPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFromPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFinalSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromPosition",
    data: BytesLike
  ): Result;

  events: {
    "LogAccountSettled(address,bool,bool,uint256,uint256,uint256,uint256,bytes32,string)": EventFragment;
    "LogIndex(bytes32)": EventFragment;
    "LogPositionBalanceDeposit(address,uint256,bytes32,uint256,bytes32,uint256)": EventFragment;
    "LogPositionBalanceWithdraw(address,address,uint256,bytes32,uint256,bytes32,uint256)": EventFragment;
    "LogWithdrawFinalSettlement(address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAccountSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogIndex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPositionBalanceDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPositionBalanceWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawFinalSettlement"): EventFragment;
}

export class PositionManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PositionManagerInterface;

  functions: {
    depositToPosition(
      account: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositToPosition(address,uint256,bytes32)"(
      account: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountBalanceAfterSettlement(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
          debt: BigNumber;
          debtIsPositive: boolean;
          size: BigNumber;
          sizeIsPositive: boolean;
          margin: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          }
        ] & {
          price: BigNumber;
          maintenanceMargin: BigNumber;
          initialMargin: BigNumber;
          index: [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          };
        }
      ]
    >;

    "getAccountBalanceAfterSettlement(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
          debt: BigNumber;
          debtIsPositive: boolean;
          size: BigNumber;
          sizeIsPositive: boolean;
          margin: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          }
        ] & {
          price: BigNumber;
          maintenanceMargin: BigNumber;
          initialMargin: BigNumber;
          index: [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          };
        }
      ]
    >;

    getAccountIndex(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        }
      ]
    >;

    "getAccountIndex(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        }
      ]
    >;

    getAccountPositionBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
          debt: BigNumber;
          debtIsPositive: boolean;
          size: BigNumber;
          sizeIsPositive: boolean;
          margin: BigNumber;
        }
      ]
    >;

    "getAccountPositionBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
          debt: BigNumber;
          debtIsPositive: boolean;
          size: BigNumber;
          sizeIsPositive: boolean;
          margin: BigNumber;
        }
      ]
    >;

    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    "getAdmin()"(overrides?: CallOverrides): Promise<[string]>;

    getFeePoolContract(overrides?: CallOverrides): Promise<[string]>;

    "getFeePoolContract()"(overrides?: CallOverrides): Promise<[string]>;

    getFinalSettlementEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "getFinalSettlementEnabled()"(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getFunderContract(overrides?: CallOverrides): Promise<[string]>;

    "getFunderContract()"(overrides?: CallOverrides): Promise<[string]>;

    getGlobalIndex(
      overrides?: CallOverrides
    ): Promise<
      [
        [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        }
      ]
    >;

    "getGlobalIndex()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        }
      ]
    >;

    getInitialMargin(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getInitialMargin()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "getIsGlobalOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIsLocalOperator(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "getIsLocalOperator(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getMaintenanceMargin(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getMaintenanceMargin()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOracleContract(overrides?: CallOverrides): Promise<[string]>;

    "getOracleContract()"(overrides?: CallOverrides): Promise<[string]>;

    getOraclePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getOraclePrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenContract(overrides?: CallOverrides): Promise<[string]>;

    "getTokenContract()"(overrides?: CallOverrides): Promise<[string]>;

    getTradeInfoContract(overrides?: CallOverrides): Promise<[string]>;

    "getTradeInfoContract()"(overrides?: CallOverrides): Promise<[string]>;

    getTradingStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTradingStartTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasAccountPermissions(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasAccountPermissions(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setAdmin(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAdmin(address)"(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFromPosition(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFromPosition(address,address,uint256,bytes32)"(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFinalSettlement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFinalSettlement()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFromPosition(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFromPosition(address,address,uint256,bytes32)"(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  depositToPosition(
    account: string,
    amount: BigNumberish,
    memo: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositToPosition(address,uint256,bytes32)"(
    account: string,
    amount: BigNumberish,
    memo: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountBalanceAfterSettlement(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
        debt: BigNumber;
        debtIsPositive: boolean;
        size: BigNumber;
        sizeIsPositive: boolean;
        margin: BigNumber;
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        }
      ] & {
        price: BigNumber;
        maintenanceMargin: BigNumber;
        initialMargin: BigNumber;
        index: [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        };
      }
    ]
  >;

  "getAccountBalanceAfterSettlement(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
        debt: BigNumber;
        debtIsPositive: boolean;
        size: BigNumber;
        sizeIsPositive: boolean;
        margin: BigNumber;
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        }
      ] & {
        price: BigNumber;
        maintenanceMargin: BigNumber;
        initialMargin: BigNumber;
        index: [number, boolean, BigNumber] & {
          timestamp: number;
          isPositive: boolean;
          value: BigNumber;
        };
      }
    ]
  >;

  getAccountIndex(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, BigNumber] & {
      timestamp: number;
      isPositive: boolean;
      value: BigNumber;
    }
  >;

  "getAccountIndex(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, BigNumber] & {
      timestamp: number;
      isPositive: boolean;
      value: BigNumber;
    }
  >;

  getAccountPositionBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
      debt: BigNumber;
      debtIsPositive: boolean;
      size: BigNumber;
      sizeIsPositive: boolean;
      margin: BigNumber;
    }
  >;

  "getAccountPositionBalance(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
      debt: BigNumber;
      debtIsPositive: boolean;
      size: BigNumber;
      sizeIsPositive: boolean;
      margin: BigNumber;
    }
  >;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  "getAdmin()"(overrides?: CallOverrides): Promise<string>;

  getFeePoolContract(overrides?: CallOverrides): Promise<string>;

  "getFeePoolContract()"(overrides?: CallOverrides): Promise<string>;

  getFinalSettlementEnabled(overrides?: CallOverrides): Promise<boolean>;

  "getFinalSettlementEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  getFunderContract(overrides?: CallOverrides): Promise<string>;

  "getFunderContract()"(overrides?: CallOverrides): Promise<string>;

  getGlobalIndex(
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, BigNumber] & {
      timestamp: number;
      isPositive: boolean;
      value: BigNumber;
    }
  >;

  "getGlobalIndex()"(
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, BigNumber] & {
      timestamp: number;
      isPositive: boolean;
      value: BigNumber;
    }
  >;

  getInitialMargin(overrides?: CallOverrides): Promise<BigNumber>;

  "getInitialMargin()"(overrides?: CallOverrides): Promise<BigNumber>;

  getIsGlobalOperator(
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getIsGlobalOperator(address)"(
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getIsLocalOperator(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getIsLocalOperator(address,address)"(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getMaintenanceMargin(overrides?: CallOverrides): Promise<BigNumber>;

  "getMaintenanceMargin()"(overrides?: CallOverrides): Promise<BigNumber>;

  getOracleContract(overrides?: CallOverrides): Promise<string>;

  "getOracleContract()"(overrides?: CallOverrides): Promise<string>;

  getOraclePrice(overrides?: CallOverrides): Promise<BigNumber>;

  "getOraclePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenContract(overrides?: CallOverrides): Promise<string>;

  "getTokenContract()"(overrides?: CallOverrides): Promise<string>;

  getTradeInfoContract(overrides?: CallOverrides): Promise<string>;

  "getTradeInfoContract()"(overrides?: CallOverrides): Promise<string>;

  getTradingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  "getTradingStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  hasAccountPermissions(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasAccountPermissions(address,address)"(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setAdmin(
    admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAdmin(address)"(
    admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFromPosition(
    account: string,
    destination: string,
    amount: BigNumberish,
    memo: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFromPosition(address,address,uint256,bytes32)"(
    account: string,
    destination: string,
    amount: BigNumberish,
    memo: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFinalSettlement(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFinalSettlement()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFromPosition(
    account: string,
    destination: string,
    amount: BigNumberish,
    memo: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFromPosition(address,address,uint256,bytes32)"(
    account: string,
    destination: string,
    amount: BigNumberish,
    memo: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositToPosition(
      account: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
        debt: BigNumber;
        debtIsPositive: boolean;
        size: BigNumber;
        sizeIsPositive: boolean;
        margin: BigNumber;
      }
    >;

    "depositToPosition(address,uint256,bytes32)"(
      account: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
        debt: BigNumber;
        debtIsPositive: boolean;
        size: BigNumber;
        sizeIsPositive: boolean;
        margin: BigNumber;
      }
    >;

    getAccountBalanceAfterSettlement(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
          debt: BigNumber;
          debtIsPositive: boolean;
          size: BigNumber;
          sizeIsPositive: boolean;
          margin: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          }
        ] & {
          price: BigNumber;
          maintenanceMargin: BigNumber;
          initialMargin: BigNumber;
          index: [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          };
        }
      ]
    >;

    "getAccountBalanceAfterSettlement(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
          debt: BigNumber;
          debtIsPositive: boolean;
          size: BigNumber;
          sizeIsPositive: boolean;
          margin: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          }
        ] & {
          price: BigNumber;
          maintenanceMargin: BigNumber;
          initialMargin: BigNumber;
          index: [number, boolean, BigNumber] & {
            timestamp: number;
            isPositive: boolean;
            value: BigNumber;
          };
        }
      ]
    >;

    getAccountIndex(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, BigNumber] & {
        timestamp: number;
        isPositive: boolean;
        value: BigNumber;
      }
    >;

    "getAccountIndex(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, BigNumber] & {
        timestamp: number;
        isPositive: boolean;
        value: BigNumber;
      }
    >;

    getAccountPositionBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
        debt: BigNumber;
        debtIsPositive: boolean;
        size: BigNumber;
        sizeIsPositive: boolean;
        margin: BigNumber;
      }
    >;

    "getAccountPositionBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, boolean, BigNumber] & {
        debt: BigNumber;
        debtIsPositive: boolean;
        size: BigNumber;
        sizeIsPositive: boolean;
        margin: BigNumber;
      }
    >;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    "getAdmin()"(overrides?: CallOverrides): Promise<string>;

    getFeePoolContract(overrides?: CallOverrides): Promise<string>;

    "getFeePoolContract()"(overrides?: CallOverrides): Promise<string>;

    getFinalSettlementEnabled(overrides?: CallOverrides): Promise<boolean>;

    "getFinalSettlementEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    getFunderContract(overrides?: CallOverrides): Promise<string>;

    "getFunderContract()"(overrides?: CallOverrides): Promise<string>;

    getGlobalIndex(
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, BigNumber] & {
        timestamp: number;
        isPositive: boolean;
        value: BigNumber;
      }
    >;

    "getGlobalIndex()"(
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, BigNumber] & {
        timestamp: number;
        isPositive: boolean;
        value: BigNumber;
      }
    >;

    getInitialMargin(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialMargin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getIsGlobalOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIsLocalOperator(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getIsLocalOperator(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMaintenanceMargin(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaintenanceMargin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleContract(overrides?: CallOverrides): Promise<string>;

    "getOracleContract()"(overrides?: CallOverrides): Promise<string>;

    getOraclePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getOraclePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenContract(overrides?: CallOverrides): Promise<string>;

    "getTokenContract()"(overrides?: CallOverrides): Promise<string>;

    getTradeInfoContract(overrides?: CallOverrides): Promise<string>;

    "getTradeInfoContract()"(overrides?: CallOverrides): Promise<string>;

    getTradingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getTradingStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasAccountPermissions(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasAccountPermissions(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAdmin(admin: string, overrides?: CallOverrides): Promise<boolean>;

    "setAdmin(address)"(
      admin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFromPosition(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFromPosition(address,address,uint256,bytes32)"(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawFinalSettlement(overrides?: CallOverrides): Promise<void>;

    "withdrawFinalSettlement()"(overrides?: CallOverrides): Promise<void>;

    withdrawFromPosition(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFromPosition(address,address,uint256,bytes32)"(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    LogAccountSettled(
      account: string | null,
      isPositive: null,
      isFundingRatePositive: null,
      amount: null,
      fundingRate: null,
      price: null,
      timestamp: null,
      balance: null,
      symbol: null
    ): TypedEventFilter<
      [
        string,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ],
      {
        account: string;
        isPositive: boolean;
        isFundingRatePositive: boolean;
        amount: BigNumber;
        fundingRate: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
        balance: string;
        symbol: string;
      }
    >;

    LogIndex(index: null): TypedEventFilter<[string], { index: string }>;

    LogPositionBalanceDeposit(
      account: string | null,
      amount: null,
      balance: null,
      margin: null,
      memo: null,
      timestamp: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string, BigNumber],
      {
        account: string;
        amount: BigNumber;
        balance: string;
        margin: BigNumber;
        memo: string;
        timestamp: BigNumber;
      }
    >;

    LogPositionBalanceWithdraw(
      account: string | null,
      destination: null,
      amount: null,
      balance: null,
      margin: null,
      memo: null,
      timestamp: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, string, BigNumber],
      {
        account: string;
        destination: string;
        amount: BigNumber;
        balance: string;
        margin: BigNumber;
        memo: string;
        timestamp: BigNumber;
      }
    >;

    LogWithdrawFinalSettlement(
      account: string | null,
      amount: null,
      balance: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { account: string; amount: BigNumber; balance: string }
    >;
  };

  estimateGas: {
    depositToPosition(
      account: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositToPosition(address,uint256,bytes32)"(
      account: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountBalanceAfterSettlement(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountBalanceAfterSettlement(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountIndex(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountIndex(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountPositionBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountPositionBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFeePoolContract(overrides?: CallOverrides): Promise<BigNumber>;

    "getFeePoolContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFinalSettlementEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "getFinalSettlementEnabled()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFunderContract(overrides?: CallOverrides): Promise<BigNumber>;

    "getFunderContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "getGlobalIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInitialMargin(overrides?: CallOverrides): Promise<BigNumber>;

    "getInitialMargin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIsGlobalOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsLocalOperator(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIsLocalOperator(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaintenanceMargin(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaintenanceMargin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleContract(overrides?: CallOverrides): Promise<BigNumber>;

    "getOracleContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOraclePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getOraclePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenContract(overrides?: CallOverrides): Promise<BigNumber>;

    "getTokenContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTradeInfoContract(overrides?: CallOverrides): Promise<BigNumber>;

    "getTradeInfoContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTradingStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "getTradingStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasAccountPermissions(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasAccountPermissions(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAdmin(address)"(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFromPosition(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFromPosition(address,address,uint256,bytes32)"(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFinalSettlement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFinalSettlement()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFromPosition(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFromPosition(address,address,uint256,bytes32)"(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositToPosition(
      account: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositToPosition(address,uint256,bytes32)"(
      account: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountBalanceAfterSettlement(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountBalanceAfterSettlement(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountIndex(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountIndex(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountPositionBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountPositionBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeePoolContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFeePoolContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFinalSettlementEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFinalSettlementEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFunderContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFunderContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGlobalIndex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitialMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getInitialMargin()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsGlobalOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIsGlobalOperator(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsLocalOperator(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIsLocalOperator(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaintenanceMargin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaintenanceMargin()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOracleContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOraclePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOraclePrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTokenContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeInfoContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTradeInfoContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradingStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTradingStartTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAccountPermissions(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasAccountPermissions(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAdmin(address)"(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFromPosition(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFromPosition(address,address,uint256,bytes32)"(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFinalSettlement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFinalSettlement()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromPosition(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFromPosition(address,address,uint256,bytes32)"(
      account: string,
      destination: string,
      amount: BigNumberish,
      memo: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
