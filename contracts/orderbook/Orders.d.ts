/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OrdersInterface extends ethers.utils.Interface {
  functions: {
    "_EIP712_DOMAIN_HASH_()": FunctionFragment;
    "_FILLED_AMOUNT_(bytes32)": FunctionFragment;
    "_PERPETUAL_V1_()": FunctionFragment;
    "_STATUS_(bytes32)": FunctionFragment;
    "cancelOrder(tuple)": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getOrdersStatus(bytes32[])": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setLimitTradeFee(uint256)": FunctionFragment;
    "setMarketTradeFee(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "trade(address,address,address,uint256,bytes,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_EIP712_DOMAIN_HASH_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_FILLED_AMOUNT_",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_PERPETUAL_V1_",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_STATUS_", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [
      {
        flags: BytesLike;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        limitFee: BigNumberish;
        leverage: BigNumberish;
        maker: string;
        taker: string;
        expiration: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOrdersStatus",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLimitTradeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketTradeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "_EIP712_DOMAIN_HASH_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_FILLED_AMOUNT_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_PERPETUAL_V1_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_STATUS_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrdersStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLimitTradeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketTradeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;

  events: {
    "LogOrderCanceled(address,tuple,bytes32)": EventFragment;
    "LogOrderFilled(bytes32,bytes32,uint256,tuple,uint256)": EventFragment;
    "LogSetLimitTradeFee(uint256)": EventFragment;
    "LogSetMarketTradeFee(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogOrderCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetLimitTradeFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetMarketTradeFee"): EventFragment;
}

export class Orders extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OrdersInterface;

  functions: {
    _EIP712_DOMAIN_HASH_(overrides?: CallOverrides): Promise<[string]>;

    "_EIP712_DOMAIN_HASH_()"(overrides?: CallOverrides): Promise<[string]>;

    _FILLED_AMOUNT_(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_FILLED_AMOUNT_(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<[string]>;

    "_PERPETUAL_V1_()"(overrides?: CallOverrides): Promise<[string]>;

    _STATUS_(arg0: BytesLike, overrides?: CallOverrides): Promise<[number]>;

    "_STATUS_(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    cancelOrder(
      order: {
        flags: BytesLike;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        limitFee: BigNumberish;
        leverage: BigNumberish;
        maker: string;
        taker: string;
        expiration: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelOrder(tuple)"(
      order: {
        flags: BytesLike;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        limitFee: BigNumberish;
        leverage: BigNumberish;
        maker: string;
        taker: string;
        expiration: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    "getAdmin()"(overrides?: CallOverrides): Promise<[string]>;

    getOrdersStatus(
      orderHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [([number, BigNumber] & { status: number; filledAmount: BigNumber })[]]
    >;

    "getOrdersStatus(bytes32[])"(
      orderHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [([number, BigNumber] & { status: number; filledAmount: BigNumber })[]]
    >;

    setAdmin(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAdmin(address)"(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLimitTradeFee(
      limitTradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLimitTradeFee(uint256)"(
      limitTradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketTradeFee(
      marketTradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMarketTradeFee(uint256)"(
      marketTradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    trade(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "trade(address,address,address,uint256,bytes,bytes32)"(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _EIP712_DOMAIN_HASH_(overrides?: CallOverrides): Promise<string>;

  "_EIP712_DOMAIN_HASH_()"(overrides?: CallOverrides): Promise<string>;

  _FILLED_AMOUNT_(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_FILLED_AMOUNT_(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _PERPETUAL_V1_(overrides?: CallOverrides): Promise<string>;

  "_PERPETUAL_V1_()"(overrides?: CallOverrides): Promise<string>;

  _STATUS_(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

  "_STATUS_(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  cancelOrder(
    order: {
      flags: BytesLike;
      amount: BigNumberish;
      limitPrice: BigNumberish;
      triggerPrice: BigNumberish;
      limitFee: BigNumberish;
      leverage: BigNumberish;
      maker: string;
      taker: string;
      expiration: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelOrder(tuple)"(
    order: {
      flags: BytesLike;
      amount: BigNumberish;
      limitPrice: BigNumberish;
      triggerPrice: BigNumberish;
      limitFee: BigNumberish;
      leverage: BigNumberish;
      maker: string;
      taker: string;
      expiration: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  "getAdmin()"(overrides?: CallOverrides): Promise<string>;

  getOrdersStatus(
    orderHashes: BytesLike[],
    overrides?: CallOverrides
  ): Promise<
    ([number, BigNumber] & { status: number; filledAmount: BigNumber })[]
  >;

  "getOrdersStatus(bytes32[])"(
    orderHashes: BytesLike[],
    overrides?: CallOverrides
  ): Promise<
    ([number, BigNumber] & { status: number; filledAmount: BigNumber })[]
  >;

  setAdmin(
    admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAdmin(address)"(
    admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLimitTradeFee(
    limitTradeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLimitTradeFee(uint256)"(
    limitTradeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketTradeFee(
    marketTradeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMarketTradeFee(uint256)"(
    marketTradeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  trade(
    sender: string,
    maker: string,
    taker: string,
    price: BigNumberish,
    data: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "trade(address,address,address,uint256,bytes,bytes32)"(
    sender: string,
    maker: string,
    taker: string,
    price: BigNumberish,
    data: BytesLike,
    arg5: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _EIP712_DOMAIN_HASH_(overrides?: CallOverrides): Promise<string>;

    "_EIP712_DOMAIN_HASH_()"(overrides?: CallOverrides): Promise<string>;

    _FILLED_AMOUNT_(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_FILLED_AMOUNT_(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<string>;

    "_PERPETUAL_V1_()"(overrides?: CallOverrides): Promise<string>;

    _STATUS_(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

    "_STATUS_(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    cancelOrder(
      order: {
        flags: BytesLike;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        limitFee: BigNumberish;
        leverage: BigNumberish;
        maker: string;
        taker: string;
        expiration: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOrder(tuple)"(
      order: {
        flags: BytesLike;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        limitFee: BigNumberish;
        leverage: BigNumberish;
        maker: string;
        taker: string;
        expiration: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    "getAdmin()"(overrides?: CallOverrides): Promise<string>;

    getOrdersStatus(
      orderHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      ([number, BigNumber] & { status: number; filledAmount: BigNumber })[]
    >;

    "getOrdersStatus(bytes32[])"(
      orderHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      ([number, BigNumber] & { status: number; filledAmount: BigNumber })[]
    >;

    setAdmin(admin: string, overrides?: CallOverrides): Promise<boolean>;

    "setAdmin(address)"(
      admin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setLimitTradeFee(
      limitTradeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLimitTradeFee(uint256)"(
      limitTradeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketTradeFee(
      marketTradeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMarketTradeFee(uint256)"(
      marketTradeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    trade(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        boolean,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        }
      ] & {
        debtAmount: BigNumber;
        sizeAmount: BigNumber;
        isBuy: boolean;
        traderFlags: string;
        makerCollat: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        };
        takerCollat: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        };
      }
    >;

    "trade(address,address,address,uint256,bytes,bytes32)"(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        boolean,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        }
      ] & {
        debtAmount: BigNumber;
        sizeAmount: BigNumber;
        isBuy: boolean;
        traderFlags: string;
        makerCollat: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        };
        takerCollat: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          flags: BigNumber;
          collateral: BigNumber;
          pnl: BigNumber;
          fee: BigNumber;
          openInterest: BigNumber;
        };
      }
    >;
  };

  filters: {
    LogOrderCanceled(
      maker: string | null,
      order: null,
      orderHash: null
    ): TypedEventFilter<
      [
        string,
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber
        ] & {
          flags: string;
          amount: BigNumber;
          limitPrice: BigNumber;
          triggerPrice: BigNumber;
          limitFee: BigNumber;
          leverage: BigNumber;
          maker: string;
          taker: string;
          expiration: BigNumber;
        },
        string
      ],
      {
        maker: string;
        order: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber
        ] & {
          flags: string;
          amount: BigNumber;
          limitPrice: BigNumber;
          triggerPrice: BigNumber;
          limitFee: BigNumber;
          leverage: BigNumber;
          maker: string;
          taker: string;
          expiration: BigNumber;
        };
        orderHash: string;
      }
    >;

    LogOrderFilled(
      orderHash: null,
      flags: null,
      triggerPrice: null,
      fill: null,
      timestamp: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, boolean] & {
          amount: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isNegativeFee: boolean;
        },
        BigNumber
      ],
      {
        orderHash: string;
        flags: string;
        triggerPrice: BigNumber;
        fill: [BigNumber, BigNumber, BigNumber, boolean] & {
          amount: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isNegativeFee: boolean;
        };
        timestamp: BigNumber;
      }
    >;

    LogSetLimitTradeFee(
      limitTradeFee: null
    ): TypedEventFilter<[BigNumber], { limitTradeFee: BigNumber }>;

    LogSetMarketTradeFee(
      marketTradeFee: null
    ): TypedEventFilter<[BigNumber], { marketTradeFee: BigNumber }>;
  };

  estimateGas: {
    _EIP712_DOMAIN_HASH_(overrides?: CallOverrides): Promise<BigNumber>;

    "_EIP712_DOMAIN_HASH_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _FILLED_AMOUNT_(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_FILLED_AMOUNT_(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<BigNumber>;

    "_PERPETUAL_V1_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _STATUS_(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "_STATUS_(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      order: {
        flags: BytesLike;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        limitFee: BigNumberish;
        leverage: BigNumberish;
        maker: string;
        taker: string;
        expiration: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelOrder(tuple)"(
      order: {
        flags: BytesLike;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        limitFee: BigNumberish;
        leverage: BigNumberish;
        maker: string;
        taker: string;
        expiration: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    "getAdmin()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOrdersStatus(
      orderHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOrdersStatus(bytes32[])"(
      orderHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAdmin(address)"(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLimitTradeFee(
      limitTradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLimitTradeFee(uint256)"(
      limitTradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketTradeFee(
      marketTradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMarketTradeFee(uint256)"(
      marketTradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trade(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "trade(address,address,address,uint256,bytes,bytes32)"(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _EIP712_DOMAIN_HASH_(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_EIP712_DOMAIN_HASH_()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _FILLED_AMOUNT_(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_FILLED_AMOUNT_(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _PERPETUAL_V1_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_PERPETUAL_V1_()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _STATUS_(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_STATUS_(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      order: {
        flags: BytesLike;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        limitFee: BigNumberish;
        leverage: BigNumberish;
        maker: string;
        taker: string;
        expiration: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelOrder(tuple)"(
      order: {
        flags: BytesLike;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        limitFee: BigNumberish;
        leverage: BigNumberish;
        maker: string;
        taker: string;
        expiration: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAdmin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOrdersStatus(
      orderHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOrdersStatus(bytes32[])"(
      orderHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAdmin(address)"(
      admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLimitTradeFee(
      limitTradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLimitTradeFee(uint256)"(
      limitTradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketTradeFee(
      marketTradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMarketTradeFee(uint256)"(
      marketTradeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trade(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "trade(address,address,address,uint256,bytes,bytes32)"(
      sender: string,
      maker: string,
      taker: string,
      price: BigNumberish,
      data: BytesLike,
      arg5: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
