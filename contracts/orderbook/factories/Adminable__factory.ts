/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Adminable } from "../Adminable";

export class Adminable__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Adminable> {
    return super.deploy(overrides || {}) as Promise<Adminable>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Adminable {
    return super.attach(address) as Adminable;
  }
  connect(signer: Signer): Adminable__factory {
    return super.connect(signer) as Adminable__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Adminable {
    return new Contract(address, _abi, signerOrProvider) as Adminable;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "setAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506100467fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61033361004b602090811b61012717901c565b61004f565b9055565b6101e98061005e6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636e9960c31461003b578063704b6c0214610059575b600080fd5b610043610079565b604051610050919061015d565b60405180910390f35b61006c61006736600461012f565b6100a9565b6040516100509190610171565b60006100a47fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610361012b565b905090565b60006100b3610079565b6001600160a01b0316336001600160a01b0316146100ec5760405162461bcd60e51b81526004016100e39061017c565b60405180910390fd5b61011f7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61036001600160a01b038416610127565b506001919050565b9055565b5490565b600060208284031215610140578081fd5b81356001600160a01b0381168114610156578182fd5b9392505050565b6001600160a01b0391909116815260200190565b901515815260200190565b6020808252601e908201527f41646d696e61626c653a2063616c6c6572206973206e6f742061646d696e000060408201526060019056fea26469706673582212207fb1d3ca084414d4d2cf143f2f15ead7e7e8da0b90383b2a50e08aa182708fa864736f6c63430007050033";
